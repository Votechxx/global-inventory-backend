// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  firstName   String
  lastName    String
  email       String  @unique
  shopId      Int?
  phoneNumber String? @unique
  username    String? @unique
  parentPhone String?

  password       String?
  role           RoleEnum @default(USER)
  profileImageId Int?     @unique

  inventoryId   Int?
  inventory     Inventory?    @relation(fields: [inventoryId], references: [id])

  dob         DateTime?
  gender      GenderEnum?
  nationality String?
  address     String?
  zipCode     String?
  city        String?
  country     String?

  dateToExpireOtp       DateTime?
  qrCode                String                 @unique @default(uuid())
  isDeleted             Boolean                @default(false)
  otp                   String?
  verified              Boolean                @default(false)
  googleId              String?
  appleId               String?
  userCreationMethod    UserCreationMethodEnum @default(EMAIL)
  verificationEmailedAt DateTime?              @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProfileImage File? @relation(fields: [profileImageId], references: [id], onDelete: SetNull)
}

model Inventory {
  id          Int          @id @default(autoincrement())
  uuid        String       @unique @default(uuid())
  name        String       
  description String?
  location    String?
  products    Product[]    @relation("ProductInventories") 
  workers     User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


model Product {
  id          Int           @id @default(autoincrement())
  uuid        String        @unique @default(uuid())
  name        String        @unique
  price       Float
  productUnits ProductUnit[]
  inventories Inventory[]   @relation("ProductInventories") 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductUnit {
  id        Int     @id @default(autoincrement())
  uuid      String  @unique @default(uuid())
  value     Int     @default(1) // number of units in this product unit
  quantity  Int     @default(0) // total quantity of this product unit
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// model Shipment {
//   id            Int       @id @default(autoincrement())
//   uuid          String    @unique @default(uuid())
//   inventoryId   Int
//   inventory     Inventory @relation(fields: [inventoryId], references: [id])
//   productId     Int
//   product       Product   @relation(fields: [productId], references: [id])
//   quantity      Int
//   cost          Float
//   createdAt     DateTime  @default(now())
// }

// model Transaction {
//   id            Int       @id @default(autoincrement())
//   uuid          String    @unique @default(uuid())
//   inventoryId   Int
//   inventory     Inventory @relation(fields: [inventoryId], references: [id])
//   productId     Int
//   product       Product   @relation(fields: [productId], references: [id])
//   quantity      Int
//   type          TransactionTypeEnum    // "ADD", "REMOVE", "TRANSFER"
//   workerId      Int
//   worker        User      @relation(fields: [workerId], references: [id])
//   createdAt     DateTime  @default(now())
// }

// model DailyReport {
//   id            Int       @id @default(autoincrement())
//   uuid          String    @unique @default(uuid())
//   inventoryId   Int
//   inventory     Inventory @relation(fields: [inventoryId], references: [id])
//   workerId      Int
//   worker        User      @relation(fields: [workerId], references: [id])
//   stock         Json      // { productId: quantity }
//   cashOnHand    Float
//   bankDeposit   Float
//   revenue       Float
//   lossPercentage Float
//   finalBalance  Float
//   status        StatusDailyReportEnum    // "PENDING", "APPROVED", "REJECTED"
//   rejectionReason String?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
// }



model File {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name     String
  path     String         @unique
  url      String
  source   FileSourceEnum @default(LOCAL)
  type     FileTypeEnum
  size     Int
  category String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isUsed Boolean @default(false)

  User User? @relation
}

enum FileTypeEnum {
  IMAGE
  VIDEO
  DOCUMENT
}

enum FileSourceEnum {
  LOCAL
  S3
  CLOUDINARY
}

enum GenderEnum {
  MALE
  FEMALE
}

enum RoleEnum {
  ADMIN // admin
  USER // worker
}

enum UserCreationMethodEnum {
  EMAIL
  GOOGLE
  APPLE
  MANUAL
}

enum StatusDailyReportEnum {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionTypeEnum {
  ADD
  REMOVE
  TRANSFER
}
