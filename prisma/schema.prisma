generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  uuid                  String                 @unique @default(uuid())
  firstName             String
  lastName              String
  email                 String                 @unique
  shopId                Int?
  phoneNumber           String?                @unique
  username              String?                @unique
  parentPhone           String?
  password              String?
  role                  RoleEnum               @default(USER)
  profileImageId        Int?                   @unique
  inventoryId           Int?
  dob                   DateTime?
  gender                GenderEnum?
  nationality           String?
  address               String?
  zipCode               String?
  city                  String?
  country               String?
  dateToExpireOtp       DateTime?
  qrCode                String                 @unique @default(uuid())
  isDeleted             Boolean                @default(false)
  otp                   String?
  verified              Boolean                @default(false)
  googleId              String?
  appleId               String?
  userCreationMethod    UserCreationMethodEnum @default(EMAIL)
  verificationEmailedAt DateTime?              @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Expense               Expense[]
  Shipment              Shipment[]
  inventory             Inventory?             @relation(fields: [inventoryId], references: [id])
  ProfileImage          File?                  @relation(fields: [profileImageId], references: [id])
}

model Product {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  name         String        @unique
  price        Float
  inventoryId  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  inventory    Inventory     @relation(fields: [inventoryId], references: [id])
  productUnits ProductUnit[]
}

model ProductUnit {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  quantity  Int      @default(0) // The per unit quantity (e.g., pieces per box) // ex: 24(quantity) pieces per box
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Int // The total value (e.g., total pieces in stock = boxes * pieces per box)   ex: value / quantity = number of boxes
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  ShipmentProduct ShipmentProduct[]
}

model Inventory {
  id             Int        @id @default(autoincrement())
  uuid           String     @unique @default(uuid())
  name           String
  description    String?
  location       String?
  currentBalance Float      @default(0)
  totalBalance   Float      @default(0)
  deposit        Float      @default(0)
  expenses       Float      @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Expense        Expense[]
  Product        Product[]
  Shipment       Shipment[]
  workers        User[]
}

model Expense {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  userId      Int
  name        String
  amount      Float
  description String?
  tag         ExpenseTag
  inventoryId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  inventory   Inventory  @relation(fields: [inventoryId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Shipment {
  id                  Int                @id @default(autoincrement())
  uuid                String             @unique @default(uuid())
  title               String             @db.VarChar(255)
  numberOfTrucks      Int                @default(1)
  status              StatusShipmentEnum @default(PENDING)
  inventoryId         Int
  isWaitingForChanges Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  userId              Int?
  user                User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  inventory           Inventory          @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  reasonMessage String?

  shipmentCardExpenses     Float?
  clarkInstallmentExpenses Float?
  otherExpenses            Float?

  shipmentExpenses ShipmentExpense[]
  shipmentProducts ShipmentProduct[]
}

model ShipmentExpense {
  id          Int         @id @default(autoincrement())
  uuid        String      @unique @default(uuid())
  shipmentId  Int
  name        String
  amount      Float
  description String?
  tag         ExpenseTag?
  shipment    Shipment    @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ShipmentProduct {
  id              Int   @id @default(autoincrement())
  shipmentId      Int
  productUnitId   Int
  quantity        Int // العدد بالقطع ex: 200 pieces   (pallets * piecesPerPallet) ex: 1.5 pallets * 144 pieces per pallet = 216 pieces
  piecesPerPallet Int // كام قطعه في البالتة   The quantity per pallet (e.g., pieces per pallet) ex: 144 pieces per pallet
  pallets         Float // عدد البالتات (quantity / piecesPerPallet) ex: 1.5 pallets
  unitPrice       Float // سعر الوحدة
  totalPrice      Float // السعر الإجمالي (pallets * unitPrice)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shipment    Shipment    @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  productUnit ProductUnit @relation(fields: [productUnitId], references: [id], onDelete: Cascade)
}

model File {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name     String
  path     String         @unique
  url      String
  source   FileSourceEnum @default(LOCAL)
  type     FileTypeEnum
  size     Int
  category String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isUsed Boolean @default(false)

  User User? @relation
}

enum ExpenseTag {
  GAS
  ELECTRICITY
  WATER
  OTHER
}

enum FileTypeEnum {
  IMAGE
  VIDEO
  DOCUMENT
}

enum FileSourceEnum {
  LOCAL
  S3
  CLOUDINARY
}

enum GenderEnum {
  MALE
  FEMALE
}

enum RoleEnum {
  ADMIN
  USER
}

enum UserCreationMethodEnum {
  EMAIL
  GOOGLE
  APPLE
  MANUAL
}

enum StatusDailyReportEnum {
  PENDING
  APPROVED
  REJECTED
}

enum StatusShipmentEnum {
  PENDING
  PENDING_REVIEW
  ACCEPTED
}

enum TransactionTypeEnum {
  ADD
  REMOVE
  TRANSFER
}
