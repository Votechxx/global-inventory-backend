generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  uuid                  String                 @unique @default(uuid())
  firstName             String
  lastName              String
  email                 String                 @unique
  shopId                Int?
  phoneNumber           String?                @unique
  username              String?                @unique
  parentPhone           String?
  password              String?
  role                  RoleEnum               @default(USER)
  profileImageId        Int?                   @unique
  inventoryId           Int?
  dob                   DateTime?
  gender                GenderEnum?
  nationality           String?
  address               String?
  zipCode               String?
  city                  String?
  country               String?
  dateToExpireOtp       DateTime?
  qrCode                String                 @unique @default(uuid())
  isDeleted             Boolean                @default(false)
  otp                   String?
  verified              Boolean                @default(false)
  googleId              String?
  appleId               String?
  userCreationMethod    UserCreationMethodEnum @default(EMAIL)
  verificationEmailedAt DateTime?              @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Expense               Expense[]
  Shipment              Shipment[]
  inventory             Inventory?             @relation(fields: [inventoryId], references: [id])
  ProfileImage          File?                  @relation(fields: [profileImageId], references: [id])
}

model Product {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  name         String        @unique
  price        Float
  inventoryId  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  inventory    Inventory     @relation(fields: [inventoryId], references: [id])
  productUnits ProductUnit[]
}

model ProductUnit {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  quantity  Int      @default(0)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Inventory {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  name        String
  description String?
  location    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Expense     Expense[]
  Product     Product[]
  Shipment    Shipment[]
  workers     User[]
}

model Expense {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  userId      Int
  name        String
  amount      Float
  description String?
  tag         ExpenseTag
  inventoryId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  inventory   Inventory  @relation(fields: [inventoryId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  Shipment    Shipment[]
}

model Shipment {
  id             Int                @id @default(autoincrement())
  uuid           String             @unique @default(uuid())
  title          String
  statys         StatusShipmentEnum @default(PENDING)
  numberOfTrucks Int                @default(1)
  inventoryId    Int
  expenseId      Int?
  userId         Int?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  expense        Expense?           @relation(fields: [expenseId], references: [id])
  inventory      Inventory          @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user           User?              @relation(fields: [userId], references: [id])
}

model File {
  id        Int            @id @default(autoincrement())
  uuid      String         @unique @default(uuid())
  name      String
  path      String         @unique
  url       String
  source    FileSourceEnum @default(LOCAL)
  type      FileTypeEnum
  size      Int
  category  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  isUsed    Boolean        @default(false)
  User      User?
}

enum ExpenseTag {
  GAS
  ELECTRICITY
  WATER
  OTHER
}

enum FileTypeEnum {
  IMAGE
  VIDEO
  DOCUMENT
}

enum FileSourceEnum {
  LOCAL
  S3
  CLOUDINARY
}

enum GenderEnum {
  MALE
  FEMALE
}

enum RoleEnum {
  ADMIN
  USER
}

enum UserCreationMethodEnum {
  EMAIL
  GOOGLE
  APPLE
  MANUAL
}

enum StatusDailyReportEnum {
  PENDING
  APPROVED
  REJECTED
}

enum StatusShipmentEnum {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum TransactionTypeEnum {
  ADD
  REMOVE
  TRANSFER
}
