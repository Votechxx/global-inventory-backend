// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  firstName   String
  lastName    String
  email       String  @unique
  shopId      Int?
  phoneNumber String? @unique
  username    String? @unique
  parentPhone String?

  password       String?
  role           RoleEnum @default(USER)
  profileImageId Int?     @unique

  inventoryId Int?
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])

  dob         DateTime?
  gender      GenderEnum?
  nationality String?
  address     String?
  zipCode     String?
  city        String?
  country     String?

  dateToExpireOtp       DateTime?
  qrCode                String                 @unique @default(uuid())
  isDeleted             Boolean                @default(false)
  otp                   String?
  verified              Boolean                @default(false)
  googleId              String?
  appleId               String?
  userCreationMethod    UserCreationMethodEnum @default(EMAIL)
  verificationEmailedAt DateTime?              @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProfileImage File?     @relation(fields: [profileImageId], references: [id], onDelete: SetNull)
  Expense      Expense[]
  Reports Report[]
}

model Product {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name  String @unique
  price Float

  inventoryId Int
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])

  productUnits ProductUnit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductUnit {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  batch   Int  @default(0)
  quantity Int @default(0)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  name           String       
  description    String?
  location       String?
  currentBalance Float?      @default(0)   // الرصيد الحالي
  totalBalance   Float?       @default(0)  // الرصيد الإجمالي
  cashOnHand     Float?       @default(0)  // المبلغ النقدي الحالي
  bankDeposit    Float?       @default(0)  // المبلغ المودع
  totalExpenses  Float?       @default(0) 
  depositReceipts File[]      @relation("InventoryDepositReceipts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workers User[]
  Product Product[]
  Expense Expense[]
  Reports Report[]

}

model Report {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique @default(uuid())
  inventoryId   Int
  workerId      Int
  stock         Json        
  cashOnHand    Float
  bankDeposit   Float
  status        StatusReportEnum  @default(PENDING)
  rejectionReason String?
  inventory     Inventory   @relation(fields: [inventoryId], references: [id])
  worker        User        @relation(fields: [workerId], references: [id])
 depositReceiptId Int?     @unique
 depositReceipt File?      @relation(fields: [depositReceiptId], references: [id], onDelete: SetNull)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Expense {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  userId Int

  name        String
  amount      Float
  description String?
  tag         ExpenseTag
  inventoryId Int

  user      User      @relation(fields: [userId], references: [id])
  inventory Inventory @relation(fields: [inventoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name     String
  path     String         @unique
  url      String
  source   FileSourceEnum @default(LOCAL)
  type     FileTypeEnum
  size     Int
  category String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isUsed Boolean @default(false)

  User User? @relation
  Inventory Inventory[] @relation("InventoryDepositReceipts")

  Report Report[]
}

enum ExpenseTag {
  GAS
  ELECTRICITY
  WATER
  OTHER
}

enum FileTypeEnum {
  IMAGE
  VIDEO
  DOCUMENT
}

enum FileSourceEnum {
  LOCAL
  S3
  CLOUDINARY
}

enum GenderEnum {
  MALE
  FEMALE
}

enum RoleEnum {
  ADMIN // admin
  USER // worker
}

enum UserCreationMethodEnum {
  EMAIL
  GOOGLE
  APPLE
  MANUAL
}

enum StatusReportEnum {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionTypeEnum {
  ADD
  REMOVE
  TRANSFER
}
